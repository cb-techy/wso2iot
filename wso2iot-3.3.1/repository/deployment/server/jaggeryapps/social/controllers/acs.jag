<%
/*
 *  Copyright (c) 2005-2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {
    var log = new Log(),
            configs = require('/configs/social.js').config(),
            process = require('process'),
            samlResponse = request.getParameter('SAMLResponse'),
            sessionId = session.getId(),
            samlRequest = request.getParameter('SAMLRequest'),
            relayState = request.getParameter('RelayState'),
            sso = require('sso'),
            samlRespObj;

    var keyStoreName = configs.ssoConfiguration.keyStoreName;
    var keyStorePassword = configs.ssoConfiguration.keyStorePassword;
    var identityAlias = configs.ssoConfiguration.identityAlias;
    var CarbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;
    if (keyStorePassword == null || keyStorePassword == "") {
        keyStorePassword = CarbonUtils.getServerConfiguration().getFirstProperty("Security.KeyStore.Password");
    }
    if (identityAlias == null || identityAlias == "") {
        identityAlias = CarbonUtils.getServerConfiguration().getFirstProperty("Security.KeyStore.KeyAlias");
    }
    if (keyStoreName == null || keyStoreName == "") {
        keyStoreName = CarbonUtils.getServerConfiguration().getFirstProperty("Security.KeyStore.Location");
    } else {
        keyStoreName = process.getProperty('carbon.home') + keyStoreName;
    }
    var keyStoreProps = {
        KEY_STORE_NAME: keyStoreName,
        KEY_STORE_PASSWORD: keyStorePassword,
        IDP_ALIAS: identityAlias
        },
            sso_sessions = application.get('sso_sessions');
            contextPath = caramel.configs().context,
            reversProxyEnabled = caramel.configs().reverseProxyEnabled,
            reverseProxyHost = caramel.configs().reverseProxyHost,
                    attr = configs.ssoConfiguration;

    if(reversProxyEnabled) {
        relayState = reverseProxyHost+relayState;
    }

    if (!sso_sessions) {
        application.put('sso_sessions', {});
        sso_sessions = application.get('sso_sessions');
    }

    if (samlResponse != null) {
        samlRespObj = sso.client.getSamlObject(samlResponse);

        if (!samlRespObj) {
            log.error('SAML response object validation failure.');
            response.sendError(401, 'You do not have permission to login to this application.Please contact your administrator and request permission.');
            return;
        }

        if (!sso.client.isLogoutResponse(samlRespObj)) {

            if (!sso.client.validateSamlResponse(samlRespObj, attr, keyStoreProps)) {
                log.error('SAML response object validation failure.');
                response.sendError(401, 'You do not have permission to login to this application.Please contact your administrator and request permission.');
                return;
            }

            var sessionObj = sso.client.decodeSAMLLoginResponse(samlRespObj, samlResponse, sessionId);

            if (sessionObj.sessionIndex != null || sessionObj.sessionIndex != 'undefined') {
                session.put("LOGGED_IN_USER", sessionObj.loggedInUser);
                session.put("Loged", "true");

                sso_sessions[sessionObj.sessionId] = sessionObj.sessionIndex;

                var user = require('/modules/user.js');

                if (user.loginWithSAML(sessionObj.loggedInUser)) {
                    if (log.isDebugEnabled()) {
                        log.debug('user is set :::' + sessionObj.loggedInUser);
                    }
                    response.sendRedirect(relayState);
                }

            }

        } else {
            session.invalidate();
            var redirectURl = contextPath;
            if(reversProxyEnabled) {
                var redirectURl = reverseProxyHost+contextPath;
            }
            response.sendRedirect(redirectURl);
        }
    }

    // if saml request is a log out request, then invalidate session.
    if (samlRequest != null) {
        var index = sso.client.decodeSAMLLogoutRequest(sso.client.getSamlObject(samlRequest));
	if(log.isDebugEnabled()){
        	log.debug('BACKEND LOGOUT RECIEVED FROM STORE THE INDEX IS ######' + index);
	}
        var jSessionId = application.get('sso_sessions')[index];

        delete application.get('sso_sessions')[index];

	if(log.isDebugEnabled()){
        	log.debug('social Session Id :::' + jSessionId);
	}
        session.invalidate();
    }
}());
%>
